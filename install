#!/bin/bash

# Shebang: Ensure Bash is available on your system and located in the specified path.

# Logging: Make sure you have write permissions in the directory where the script is located, or modify the log file path accordingly.
LOG="install_log.txt"

# Enable error handling
set -e

# Predefined apps
predefined_apps=("hyprland" "swaybg" "swaylock-effects" "wofi" "code" "btrfs-assistant" "protonvpn" "btrfsmaintenance" "snap-pac-grub" "snap-pac" "snapper" "grub-btrfs" "wlogout" "mako" "grim" "slurp" "wl-clipboard" "polkit-kde-agent" "nwg-look-bin" "swww" "pipewire-alsa" "pavucontrol" "playerctl" "qt5ct" "btop" "jq" "gvfs" "gvfs-mtp" "ffmpegthumbs" "mpv" "python-requests" "pamixer" "brightnessctl" "xdg-user-dirs" "viewnior" "mpv" "network-manager-applet" "cava" "waybar-hyprland-git" "bluez" "bluez-utils" "blueman" "sddm-git" "sddm-catppuccin-git" "xdg-desktop-portal-hyprland")

# Predefined fonts
predefined_fonts=("otf-font-awesome" "ttf-jetbrains-mono-nerd" "ttf-jetbrains-mono" "otf-font-awesome-4" "ttf-droid" "ttf-fantasque-sans-mono" "adobe-source-code-pro-fonts")

# Predefined themes
predefined_themes=("catppuccin-gtk-theme-mocha" "catppuccin-cursors-mocha")

# Prompt for additional apps to install
read -rp "Enter additional apps you want to install (separated by spaces), or press Enter to skip: " additional_apps

# Combine predefined apps and additional apps
all_apps=("${predefined_apps[@]}" "${additional_apps[@]}")

# Create a backup of existing config folders
NOTE="\e[34m[INFO]\e[0m"

backup_config() {
  local dir_path="$HOME/.config/$1"
  if [ -d "$dir_path" ]; then
    echo -e "${NOTE} Config for $1 found, backing up."
    mv "$dir_path" "$dir_path-back-up" 2>&1 | tee -a "$LOG"
    echo -e "${NOTE} Backed up $1 to $dir_path-back-up."
  fi
}

# Copy new config files
copy_config() {
  cp -r config/"$1" "$HOME/.config/" || { echo "Error: Failed to copy $1 config files."; exit 1; } 2>&1 | tee -a "$LOG"
}

backup_config "Thunar"
backup_config "xfce4"

copy_config "xfce4"
copy_config "Thunar"

# Update package databases
sudo pacman -Sy

# Install each app using the package manager (pacman)
for app in "${all_apps[@]}"; do
  sudo pacman -S --noconfirm "$app"
done

# Install fonts using the package manager (pacman)
for font in "${predefined_fonts[@]}"; do
  sudo pacman -S --noconfirm "$font"
done

# Install themes using the package manager (pacman)
for theme in "${predefined_themes[@]}"; do
  sudo pacman -S --noconfirm "$theme"
done

# Enable sddm service if not already enabled
if ! sudo systemctl is-enabled --quiet sddm; then
  sudo systemctl enable sddm
fi

# Set up SDDM theme
echo -e "${NOTE} Setting up the login screen."
sddm_conf_dir="/etc/sddm.conf.d"
if [ ! -d "$sddm_conf_dir" ]; then
  printf "${NOTE} $sddm_conf_dir not found, creating...\n"
  sudo mkdir "$sddm_conf_dir" 2>&1 | tee -a "$LOG"
fi
echo -e "[Theme]\nCurrent=catppuccin" | sudo tee -a "$sddm_conf_dir/10-theme.conf" 2>&1 | tee -a "$LOG"

# Copy wayland session desktop file
wayland_sessions_dir="/usr/share/wayland-sessions"
if [ ! -d "$wayland_sessions_dir" ]; then
  printf "${NOTE} $wayland_sessions_dir not found, creating...\n"
  sudo mkdir "$wayland_sessions_dir" 2>&1 | tee -a "$LOG"
fi
sudo cp misc/hyprland.desktop "$wayland_sessions_dir/" 2>&1 | tee -a "$LOG"

# Disable WiFi powersave mode
read -r -n 1 -p "${NOTE} Would you like to disable WiFi powersave mode? (y/n) " WIFI
if [[ $WIFI =~ ^[Yy]$ ]]; then
  LOC="/etc/NetworkManager/conf.d/wifi-powersave.conf"
  if [ -f "$LOC" ]; then
    printf "${NOTE} WiFi powersave is already disabled.\n"
  else
    printf "\n${NOTE} The following has been added to $LOC.\n"
    printf "[connection]\nwifi.powersave = 2" | sudo tee -a "$LOC"
    printf "\n${NOTE} Restarting NetworkManager service...\n"
    sudo systemctl restart NetworkManager 2>&1 | tee -a "$LOG"
    sleep 2
  fi
else
  printf "${NOTE} WiFi powersave mode is not being disabled.\n"
fi

# Copy config and wallpaper files
read -r -n 1 -p "${NOTE} Would you like to copy config and wallpaper files? (y/n) " CFG
if [[ $CFG =~ ^[Yy]$ ]]; then
  copy_and_backup() {
    local dir_path="$HOME/.config/$1"
    if [ -d "$dir_path" ]; then
      echo -e "${NOTE} Config for $1 found, attempting to back up."
      mv "$dir_path" "$dir_path-back-up" 2>&1 | tee -a "$LOG"
      echo -e "${NOTE} Backed up $1 to $dir_path-back-up."
    fi
  }

  copy_and_backup "btop"
  copy_and_backup "cava"
  copy_and_backup "hypr"
  copy_and_backup "foot"
  copy_and_backup "mako"
  copy_and_backup "swaylock"
  copy_and_backup "waybar"
  copy_and_backup "wlogout"
  copy_and_backup "wofi"

  dir_path="$HOME/Pictures/wallpapers"
  if [ -d "$dir_path" ]; then
    echo -e "${NOTE} Wallpapers in $dir_path found, attempting to back up."
    mv "$dir_path" "$dir_path-back-up" 2>&1 | tee -a "$LOG"
    echo -e "${NOTE} Backed up wallpapers to $dir_path-back-up."
  fi

  cp -r misc/wallpapers "$HOME/Pictures/" || { echo "Error: Failed to copy wallpapers."; exit 1; } 2>&1 | tee -a "$LOG"
else
  printf "${NOTE} Config and wallpaper files are not being copied.\n"
fi

# Finalize and clean up
echo -e "${NOTE} Installation completed successfully!"
