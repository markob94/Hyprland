#!/bin/bash

# Set colors for output messages
OK="\e[32m[OK]\e[0m"
NOTE="\e[33m[NOTE]\e[0m"
WARN="\e[31m[WARN]\e[0m"
CAT="\e[36m[ACTION]\e[0m"

# Display welcome message
echo "Welcome to my Arch-Hyprland Installer"
sleep 2

# Display warning messages
echo -e "${WARN} PLEASE BACKUP YOUR FILES BEFORE PROCEEDING!"
echo -e "${NOTE} Some commands require your password to execute."
echo -e "${NOTE} If installing on a VM, ensure 3D acceleration is enabled."
echo -e "${NOTE} If your system is not fully updated, cancel and perform an update."

# Prompt for installation confirmation
read -n1 -rep "${CAT} Proceed with installation? (y/n) " PROCEED
echo

if [[ $PROCEED =~ ^[Yy]$ ]]; then
    echo -e "${OK} Installation in progress..."
    # Continue with the installation steps
else
    echo -e "${NOTE} No changes made to your system. Goodbye!"
    exit
fi

# Continue with the rest of the installation steps


#clear screen
clear


# Function to print error messages
print_error() {
    printf " %s%s\n" "${ERROR}" "$1" "$NC" 2>&1 | tee -a "$LOG"
}

# Function to print success messages
print_success() {
    printf "%s%s%s\n" "${OK}" "$1" "$NC" 2>&1 | tee -a "$LOG"
}

# Exit immediately if a command exits with a non-zero status.
set -e 









#clear screen
clear 


# Function to print error messages
print_error() {
    printf "%s - %s install had failed, please check the install.log\n" "${ERROR}" "$1" >&2
    exit 1
}

# Function to install packages
install_package() {
    sudo pacman -S --noconfirm "$1" >> "$LOG" 2>&1 || print_error "$1"
}

# installation of other components needed
printf "\n%s - Installing other necessary packages.... \n" "${NOTE}"

packages=(
    "foot"
    "swaybg"
    "swaylock-effects"
    "wofi"
    "wlogout"
    "mako"
    "grim"
    "slurp"
    "wl-clipboard"
    "polkit-kde-agent"
    "nwg-look-bin"
    "swww"
    "mousepad"
    "micro"
    "pipewire-alsa"
    "pavucontrol"
    "playerctl"
    "qt5ct"
    "btop"
    "jq"
    "gvfs"
    "gvfs-mtp"
    "ffmpegthumbs"
    "mpv"
    "python-requests"
    "pamixer"
    "brightnessctl"
    "xdg-user-dirs"
    "viewnior"
    "mpv"
    "network-manager-applet"
    "cava"
    "btrfs-assistant"
    "snap-pac"
    "snapper"
    "grub-btrfs"
    "snap-pac-grub"
    "btrfsmaintenance"
    "protonvpn"
    "code"
)

for package in "${packages[@]}"; do
    install_package "$package"
done

fonts=(
    "otf-font-awesome"
    "ttf-jetbrains-mono-nerd"
    "ttf-jetbrains-mono"
    "otf-font-awesome-4"
    "ttf-droid"
    "ttf-fantasque-sans-mono"
    "adobe-source-code-pro-fonts"
)

for font in "${fonts[@]}"; do
    install_package "$font"
done

# Check if waybar or waybar-hyprland is installed
if pacman -Qs waybar > /dev/null; then
    read -n1 -rep "${CAT} waybar is already installed. Would you like to uninstall it and install waybar-hyprland-git? (y/n)" bar
    echo
    if [[ $bar =~ ^[Yy]$ ]]; then
        sudo pacman -R --noconfirm waybar waybar-hyprland >> "$LOG" 2>&1 || true
        install_package waybar-hyprland-git
    else
        echo "You chose not to install waybar-hyprland-git."
    fi
else
    install_package waybar-hyprland-git
fi

echo
print_success "All necessary packages installed successfully."
sleep 2

# Clear screen
clear


# Function to print error messages
print_error() {
    printf "%s - %s install had failed, please check the install.log\n" "${ERROR}" "$1" >&2
    exit 1
}

# Function to install packages
install_package() {
    sudo pacman -S --noconfirm "$1" >> "$LOG" 2>&1 || print_error "$1"
}

# Themes and Cursors
read -n1 -rep "${CAT} OPTIONAL - Would you like to install Catppuccin-GTK Mocha Theme and Cursors? (y/n)" inst2
echo

if [[ $inst2 =~ ^[Yy]$ ]]; then
    printf "${NOTE} Installing Theme packages...\n"
    themes=(
        "catppuccin-gtk-theme-mocha"
        "catppuccin-cursors-mocha"
    )

    for theme in "${themes[@]}"; do
        install_package "$theme"
    done
else
    printf "${NOTE} No themes will be installed..\n"
fi

# Clear screen
clear

# File Manager
read -n1 -rep "${CAT} OPTIONAL - Would you like to install Thunar as the file manager? (y/n)" inst3
echo

if [[ $inst3 =~ ^[Yy]$ ]]; then
    thunar_packages=(
        "thunar"
        "thunar-volman"
        "tumbler"
        "thunar-archive-plugin"
    )

    for package in "${thunar_packages[@]}"; do
        install_package "$package"
    done

    # Backup existing config folders
    for dir in "Thunar" "xfce4"; do
        dir_path=~/.config/"$dir"
        if [ -d "$dir_path" ]; then
            echo -e "${NOTE} Config for $dir found, backing up."
            mv "$dir_path" "$dir_path-back-up"
            echo -e "${NOTE} Backed up $dir to $dir_path-back-up."
        fi
    done

    # Copy config files
    cp -r config/xfce4 ~/.config/ || { echo "Error: Failed to copy xfce4 config files."; exit 1; }
    cp -r config/Thunar ~/.config/ || { echo "Error: Failed to copy Thunar config files."; exit 1; }
else
    printf "${NOTE} Thunar will not be installed.\n"
fi

# Clear screen
clear

# Bluetooth
read -n1 -rep "${CAT} OPTIONAL - Would you like to install Bluetooth packages? (y/n)" inst4
echo

if [[ $inst4 =~ ^[Yy]$ ]]; then
    printf "${NOTE} Installing Bluetooth Packages...\n"
    bluetooth_packages=(
        "bluez"
        "bluez-utils"
        "blueman"
    )

    for package in "${bluetooth_packages[@]}"; do
        install_package "$package"
    done

    printf "Activating Bluetooth Services...\n"
    sudo systemctl enable --now bluetooth.service >> "$LOG" 2>&1
else
    printf "${NOTE} No Bluetooth packages installed.\n"
fi

# Clear screen
clear


# Function to print error messages
print_error() {
    printf "%s - %s install has failed, please check the install.log\n" "${ERROR}" "$1" >&2
    exit 1
}

# Function to install packages
install_package() {
    sudo pacman -S --noconfirm "$1" >> "$LOG" 2>&1 || print_error "$1"
}

# SDDM
read -n1 -rep "${CAT} OPTIONAL - Would you like to install SDDM as the login manager? (y/n)" install_sddm
echo

if [[ $install_sddm =~ ^[Yy]$ ]]; then
    # Check if SDDM is already installed
    if pacman -Qs sddm > /dev/null; then
        # Prompt user to manually install sddm-git to remove SDDM
        read -n1 -rep "SDDM is already installed. Would you like to manually install sddm-git to remove it? This requires manual intervention. (y/n)" manual_install_sddm
        echo
        if [[ $manual_install_sddm =~ ^[Yy]$ ]]; then
            $ISAUR -S sddm-git 2>&1 | tee -a "$LOG"
        fi
    fi

    # Install SDDM and Catppuccin theme
    printf "${NOTE} Installing SDDM and Catppuccin theme...\n"
    sddm_packages=(
        "sddm-git"
        "sddm-catppuccin-git"
    )

    for package in "${sddm_packages[@]}"; do
        install_package "$package"
    done

    printf "Activating sddm service...\n"
    sudo systemctl enable sddm

    # Set up SDDM
    sddm_conf_dir=/etc/sddm.conf.d
    if [ ! -d "$sddm_conf_dir" ]; then
        printf "%s - %s not found, creating...\n" "${CAT}" "${sddm_conf_dir}"
        sudo mkdir "$sddm_conf_dir" 2>&1 | tee -a "$LOG"
    fi

    echo -e "[Theme]\nCurrent=catppuccin" | sudo tee -a "$sddm_conf_dir/10-theme.conf" 2>&1 | tee -a "$LOG"

    wayland_sessions_dir=/usr/share/wayland-sessions
    if [ ! -d "$wayland_sessions_dir" ]; then
        printf "%s - %s not found, creating...\n" "${CAT}" "${wayland_sessions_dir}"
        sudo mkdir "$wayland_sessions_dir" 2>&1 | tee -a "$LOG"
    fi

    sudo cp misc/hyprland.desktop "$wayland_sessions_dir/" 2>&1 | tee -a "$LOG"
else
    printf "${NOTE} SDDM will not be installed.\n"
fi

 
#clear screen
clear




# Function to print error messages
print_error() {
    printf "%s - %s install has failed, please check the install.log\n" "${ERROR}" "$1" >&2
    exit 1
}

# Function to install packages
install_package() {
    sudo pacman -S --noconfirm "$1" >> "$LOG" 2>&1 || print_error "$1"
}

# XDPH
printf "${YELLOW} Kindly note XDPH only needed for screencast/screenshot. Hyprland will still work hence this is optional\n"
printf "\n"
read -n1 -rep "${CAT} Would you like to install XDG-Portal-Hyprland? (y/n)" XDPH
if [[ $XDPH =~ ^[Yy]$ ]]; then
    printf "${NOTE} Installing XDPH...\n"
    xdph_packages=(
        "xdg-desktop-portal-hyprland"
    )

    for package in "${xdph_packages[@]}"; do
        install_package "$package"
    done

    printf "${NOTE} Checking for other XDG-Desktop-Portal-Implementations...\n"
    sleep 1
    printf "\n"
    printf "${NOTE} XDG-desktop-portal-KDE (if installed) should be manually disabled or removed! I can't remove it... sorry...\n"
    read -n1 -rep "${CAT} Would you like me to try to remove other XDG-Desktop-Portal-Implementations? (y/n)" XDPH1
    sleep 1
    if [[ $XDPH1 =~ ^[Yy]$ ]]; then
        # Clean out other portals
        printf "${NOTE} Clearing any other xdg-desktop-portal implementations...\n"

        # Check if packages are installed and uninstall if present
        if pacman -Qs xdg-desktop-portal-gnome > /dev/null; then
            echo "Removing xdg-desktop-portal-gnome..."
            sudo pacman -R --noconfirm xdg-desktop-portal-gnome 2>&1 | tee -a "$LOG"
        fi
        if pacman -Qs xdg-desktop-portal-gtk > /dev/null; then
            echo "Removing xdg-desktop-portal-gtk..."
            sudo pacman -R --noconfirm xdg-desktop-portal-gtk 2>&1 | tee -a "$LOG"
        fi
        if pacman -Qs xdg-desktop-portal-wlr > /dev/null; then
            echo "Removing xdg-desktop-portal-wlr..."
            sudo pacman -R --noconfirm xdg-desktop-portal-wlr 2>&1 | tee -a "$LOG"
        fi
        if pacman -Qs xdg-desktop-portal-lxqt > /dev/null; then
            echo "Removing xdg-desktop-portal-lxqt..."
            sudo pacman -R --noconfirm xdg-desktop-portal-lxqt 2>&1 | tee -a "$LOG"
        fi

        printf "All other XDG-DESKTOP-PORTAL implementations cleared.\n"
    fi
else
    printf "${NOTE} XDPH will not be installed.\n"
fi




#clear screen
clear





# Function to print error messages
print_error() {
    printf "%s - %s install has failed, please check the install.log\n" "${ERROR}" "$1" >&2
    exit 1
}

# Function to install packages
install_package() {
    sudo pacman -S --noconfirm "$1" >> "$LOG" 2>&1 || print_error "$1"
}

# Disable wifi powersave mode
read -n1 -rp "${CAT} Would you like to disable WiFi powersave? (y/n) " WIFI
if [[ $WIFI =~ ^[Yy]$ ]]; then
    LOC="/etc/NetworkManager/conf.d/wifi-powersave.conf"
    if [ -f "$LOC" ]; then
        printf "${OK} WiFi powersave mode is already disabled.\n"
    else
        printf "\n"
        printf "${NOTE} Adding the following to $LOC:\n"
        printf "[connection]\nwifi.powersave = 2" | sudo tee -a $LOC
        printf "\n"
        printf "${NOTE} Restarting NetworkManager service...\n"
        sudo systemctl restart NetworkManager 2>&1 | tee -a "$LOG"
        sleep 2        
    fi    
else
    printf "${NOTE} WiFi powersave mode will not be disabled.\n"
fi

# Clear screen
clear

# Function to detect keyboard layout in a tty environment
detect_tty_layout() {
  layout=$(localectl status --no-pager | awk '/X11 Layout/ {print $3}')
  if [ -n "$layout" ]; then
    echo "$layout"
  else
    echo "unknown"
  fi
}

# Function to detect keyboard layout in an X server environment
detect_x_layout() {
  layout=$(setxkbmap -query | grep layout | awk '{print $2}')
  if [ -n "$layout" ]; then
    echo "$layout"
  else
    echo "unknown"
  fi
}

# Detect the current keyboard layout based on the environment
if [ -n "$DISPLAY" ]; then
  # System is in an X server environment
  layout=$(detect_x_layout)
else
  # System is in a tty environment
  layout=$(detect_tty_layout)
fi

echo "Keyboard layout: $layout"

printf "${NOTE} Detecting keyboard layout to prepare necessary changes in hyprland.conf before copying\n"
printf "\n"
printf "\n"

# Prompt the user to confirm whether the detected layout is correct
read -p "Detected keyboard layout or keymap: $layout. Is this correct? [y/n] " confirm

if [ "$confirm" = "y" ]; then
  # If the detected layout is correct, update the 'kb_layout=' line in the file
  awk -v layout="$layout" '/kb_layout/ {$0 = "  kb_layout=" layout} 1' config/hypr/hyprland.conf > temp.conf
  mv temp.conf config/hypr/hyprland.conf
else
  # If the detected layout is not correct, prompt the user to enter the correct layout
  printf "${WARN} Make sure to type in the proper keyboard layout, e.g., uk, de, pl, etc.\n"
  read -p "Please enter the correct keyboard layout: " new_layout
  # Update the 'kb_layout=' line with the correct layout in the file
  awk -v new_layout="$new_layout" '/kb_layout/ {$0 = "  kb_layout=us," new_layout} 1' config/hypr/hyprland.conf > temp.conf
  mv temp.conf config/hypr/hyprland.conf
fi
printf "\n"
printf "\n"




# Function to print error messages
print_error() {
    printf "%s - %s\n" "${ERROR}" "$1" >&2
    exit 1
}

# Function to copy config and wallpaper files
copy_files() {
    printf "Copying config files...\n"
    mkdir -p ~/.config
    cp -r config/hypr ~/.config/ || print_error "Failed to copy hypr config files."
    cp -r config/foot ~/.config/ || print_error "Failed to copy foot config files."
    cp -r config/wlogout ~/.config/ || print_error "Failed to copy wlogout config files."
    cp -r config/btop ~/.config/ || print_error "Failed to copy btop config files."
    cp -r config/cava ~/.config/ || print_error "Failed to copy cava config files."
    mkdir -p ~/Pictures/wallpapers
    cp -r wallpapers ~/Pictures/ || print_error "Failed to copy wallpapers."
    echo "Copy completed!"

    # Set some files as executable
    chmod +x ~/.config/hypr/scripts/*
}

# Function to backup existing config or wallpaper folders
backup_folder() {
    local folder_name="$1"
    local folder_path="$2"
    if [ -d "$folder_path" ]; then
        echo "${NOTE} - $folder_name folder found, attempting to back up."
        mv "$folder_path" "$folder_path-back-up" || print_error "Failed to back up $folder_name folder."
        echo "${NOTE} - Backed up $folder_name to $folder_path-back-up."
    fi
}

set -e # Exit immediately if a command exits with a non-zero status.

read -n1 -rep "${CAT} Would you like to copy config and wallpaper files? (y/n)" CFG
if [[ $CFG =~ ^[Yy]$ ]]; then
    # Backup existing config and wallpaper folders
    for DIR in btop cava hypr foot mako swaylock waybar wlogout wofi; do
        DIRPATH=~/.config/$DIR
        backup_folder "Config for $DIR" "$DIRPATH"
    done

    backup_folder "Wallpapers" "~/Pictures/wallpapers"

    # Copy config and wallpaper files
    copy_files
else
    print_error "No config files and wallpaper files copied."
fi


#clear screen
clear

### Script is done ###
printf "\n${OK} Yey! Installation Completed.\n"
printf "\n"
printf "\n"
printf "\n${NOTE} NOTICE TO NVIDIA OWNERS! KINDLY REBOOT YOUR SYSTEM !!!"
printf "\n"
printf "\n"
sleep 2
printf "\n${NOTE} You can start Hyprland by typing Hyprland (IF SDDM is not installed) (note the capital H!).\n"
printf "\n"
printf "\n"
printf "\n"
read -n1 -rep "${CAT} Would you like to start Hyprland now? (y,n)" HYP

if [[ $HYP =~ ^[Yy]$ ]]; then
    if command -v sddm >/dev/null; then
        sudo systemctl start sddm 2>&1 | tee -a "$LOG"
    fi
    
    if command -v Hyprland >/dev/null; then
        exec Hyprland
    else
        print_error "Hyprland not found. Please make sure Hyprland is installed by checking install.log.\n"
        exit 1
    fi
else
    exit
fi


